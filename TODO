[X] Add an interactive, runtime user interface:

The emulator would be much more intuitive if it had a runtime user interface
system that would allow the user to change settings on the fly.

The configuration system already has the neccessary code to allow the user to
modify the configuration file (using the `update_line' field of a ConfigEntry,
and the `write_config_file' method of the ConfigSystem).  Perhaps an entry
lookup routine will be neccessary, but that should be trivial to write.

The key to achieving this goal will be rustyline:

    https://kkawakam.github.io/rustyline/rustyline/

Rustyline is a readline implementation.  It will allow us to have a command
prompt with the emulator, and it'll make sure that messages logged to the
screen won't break the prompt.  It will also provide us with history and
autocompletions, if these features will turn out to be desirable.

The addition of the user interface will also require us to add threading
into the emulator.  The emulator's main loop will run in its own thread,
while the user interface will run in its own.  There will be a communication
channel that the emulation thread will check on each emulation loop iteration,
and handle any requests the user gave it, while the user interface will issue
these requests.

Some of the interesting features this will allow is better cassette support,
the ability to load text files into the emulator via the keyboard system,
and of course the ability to change settings without having to modify the
configuration file by hand.


Comment:

After a short while of experimenting with rustyline, it has shown that it is
not capable of doing what I need, the command prompt does indeed get garbled
when messages are displayed at the same time as the command prompt is displayed
and awaiting a command.

I decided to port over the curses-based user interface I use in my code testbed
project, the dooshputor.  The problem with the curses-based interface is that
for the sake of simplicity, since I never intended to port the interface over
to trs80m1-rs, it does not support unicode (filters unicode characters out with
question marks, and doesn't accept them as valid keyboard input).  As a
consequence, any filenames specified in the curses-based user interface must
consist of ascii-only characters.


[X] Make the emulator configurable via the curses-based user interface:

This is mostly a continuation of the previous task, since while we now have
an interactive, runtime user interface, it can not yet change configuration
options.


Comment:

Changing the configuration is now possible using the `/config change' command.
See `/help config' in the curses-based user interface for details.


[ ] Add sound support:

Currently, the emulator doesn't have sound suppport.

Sound on the TRS-80 Model I is created using the cassette interface.  Because
our cassette code is adapted from xtrs, it shouldn't be too hard to adapt the
sound support as well.

SDL has an audio interface which could be used for sound output, or another
option would perhaps be the portaudio library.


[X] Improve cassette handling:

Once the interactive user interface is implemented, it would be nice to change
our cassette handling model to having a single cassette file, which we could
rewind and seek to different locations to allow storing more than just a single
record on a single tape - like you can do in real life.
